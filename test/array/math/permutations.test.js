import assert from 'assert';
import '../../../src';


describe('permutations', () => {

    describe('repeating', () => {

        const options = {repeating: true};
        it('empty array', () => {
            assert.deepEqual([].permutations(2, options), []);
        });

        it('1d array', () => {
            assert.deepEqual([1, 2, 3].permutations(1, options), [[1], [2], [3]]);
        });

        it('2d single array', () => {
            assert.deepEqual([1, 2].permutations(2, options), [[1, 1], [1, 2], [2, 1], [2, 2]]);
        });

        it('2d array', () => {
            assert.deepEqual([1, 2, 3].permutations(2, options), [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]]);
        });

        it('3d single array', () => {
            assert.deepEqual([1, 2, 3].permutations(3, options), [[1,1,1],[1,1,2],[1,1,3],[1,2,1],[1,2,2],[1,2,3],[1,3,1],[1,3,2],[1,3,3],[2,1,1],[2,1,2],[2,1,3],[2,2,1],[2,2,2],[2,2,3],[2,3,1],[2,3,2],[2,3,3],[3,1,1],[3,1,2],[3,1,3],[3,2,1],[3,2,2],[3,2,3],[3,3,1],[3,3,2],[3,3,3]]);
        });

        it('3d array', () => {
            assert.deepEqual([1, 2, 3, 4].permutations(3, options), [[1,1,1],[1,1,2],[1,1,3],[1,1,4],[1,2,1],[1,2,2],[1,2,3],[1,2,4],[1,3,1],[1,3,2],[1,3,3],[1,3,4],[1,4,1],[1,4,2],[1,4,3],[1,4,4],[2,1,1],[2,1,2],[2,1,3],[2,1,4],[2,2,1],[2,2,2],[2,2,3],[2,2,4],[2,3,1],[2,3,2],[2,3,3],[2,3,4],[2,4,1],[2,4,2],[2,4,3],[2,4,4],[3,1,1],[3,1,2],[3,1,3],[3,1,4],[3,2,1],[3,2,2],[3,2,3],[3,2,4],[3,3,1],[3,3,2],[3,3,3],[3,3,4],[3,4,1],[3,4,2],[3,4,3],[3,4,4],[4,1,1],[4,1,2],[4,1,3],[4,1,4],[4,2,1],[4,2,2],[4,2,3],[4,2,4],[4,3,1],[4,3,2],[4,3,3],[4,3,4],[4,4,1],[4,4,2],[4,4,3],[4,4,4]]);
        });

    });

    describe('not repeating', () => {

        const options = {repeating: false};
        it('empty array', () => {
            assert.deepEqual([].permutations(2, options), []);
        });

        it('3 pick 1 array', () => {
            assert.deepEqual([1, 2, 3].permutations(1, options).sort(), [[1], [2], [3]].sort());
        });


        it('2 pick 2 single array', () => {
            assert.deepEqual([1, 2].permutations(2, options).sort(), [[1, 2], [2, 1]].sort());
        });


        it('3 pick 2 array', () => {
           assert.deepEqual([1, 2, 3].permutations(2, options).sort(), [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]].sort());
        });

        it('3 pick 3 single array', () => {
           assert.deepEqual([1, 2, 3].permutations(3, options).sort(), [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].sort());
        });


        it('4 pick 3 array', () => {
            assert.deepEqual([1, 2, 3, 4].permutations(3, options).sort(), [[1,2,3],[1,2,4],[1,3,2],[1,3,4],[1,4,2],[1,4,3],[2,1,3],[2,1,4],[2,3,1],[2,3,4],[2,4,1],[2,4,3],[3,1,2],[3,1,4],[3,2,1],[3,2,4],[3,4,1],[3,4,2],[4,1,2],[4,1,3],[4,2,1],[4,2,3],[4,3,1],[4,3,2]].sort());
        });


        it('5 pick 2 array', () => {
            assert.deepEqual([1, 2, 3, 4, 5].permutations(2, options).sort(), [[1,2],[1,3],[1,4],[1,5],[2,1],[2,3],[2,4],[2,5],[3,1],[3,2],[3,4],[3,5],[4,1],[4,2],[4,3],[4,5],[5,1],[5,2],[5,3],[5,4]].sort());
        });


        it('5 pick 3 array', () => {
            const arr = [1, 2, 3, 4, 5].permutations(3, options).sort();
            assert.deepEqual(arr, [[1,2,3],[1,2,4],[1,2,5],[1,3,2],[1,3,4],[1,3,5],[1,4,2],[1,4,3],[1,4,5],[1,5,2],[1,5,3],[1,5,4],[2,1,3],[2,1,4],[2,1,5],[2,3,1],[2,3,4],[2,3,5],[2,4,1],[2,4,3],[2,4,5],[2,5,1],[2,5,3],[2,5,4],[3,1,2],[3,1,4],[3,1,5],[3,2,1],[3,2,4],[3,2,5],[3,4,1],[3,4,2],[3,4,5],[3,5,1],[3,5,2],[3,5,4],[4,1,2],[4,1,3],[4,1,5],[4,2,1],[4,2,3],[4,2,5],[4,3,1],[4,3,2],[4,3,5],[4,5,1],[4,5,2],[4,5,3],[5,1,2],[5,1,3],[5,1,4],[5,2,1],[5,2,3],[5,2,4],[5,3,1],[5,3,2],[5,3,4],[5,4,1],[5,4,2],[5,4,3]].sort());
        });

    });
});
